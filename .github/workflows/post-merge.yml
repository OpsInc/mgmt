---
# yamllint disable rule:line-length

name: Post merge CI

on:
  pull_request:
    types:
      - closed

env:
  RED: '\033[0;31m'
  GREEN: '\033[0;32m'
  YELLOW: '\033[1;33m'
  H_GREEN: '\033[97;42m'
  H_WHITE: '\033[90;47m'
  H_YELLOW: '\033[90;43m'
  H_RED: '\033[97;41m'
  H_BLUE: '\033[97;44m'
  H_MAGENTA: '\033[97;45m'
  H_CYAN: '\033[97;46m'
  NC: '\033[0m'  # No Color
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  ENVIRONMENT: "dev"
  PROJECT: "mgmt"

jobs:
  git-tag-release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    name: Post-merge Git actions
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Git config
        run: |
          git config --local --add safe.directory $GITHUB_WORKSPACE

      - name: Fetch git commit info
        id: git_info
        run: |
          GIT_SUBJECT=$(git log -1 --pretty=format:"%s")
          echo "git_subject=$GIT_SUBJECT" >>$GITHUB_OUTPUT

          echo $GIT_SUBJECT

          GIT_BODY=$(git log -1 --format=%b HEAD | grep "\S") || GIT_BODY=""

          if [ -z $GIT_BODY ]; then
          	echo "git_body=$GIT_BODY" >>$GITHUB_OUTPUT
          else
            # This hack is required to add a multiline output to GITHUB_OUTPUT
          	echo "git_body<<EOF" >>$GITHUB_OUTPUT
          	echo $GIT_BODY >>$GITHUB_OUTPUT
          	echo "EOF" >>$GITHUB_OUTPUT
          fi

      - name: Create latest tag
        id: create_tag
        run: |
          git fetch --unshallow --tags
          VERSION=$(cat VERSION)
          LATEST_TAG=$(cat VERSION | tr -d 'v.')
          CURRENT_TAG=$(git tag --list| tail -n1| tr -d 'v.')
          if [[ $LATEST_TAG -gt $CURRENT_TAG ]]
          then
            git tag $VERSION
            git push --tags
            echo "tag_version=$VERSION" >> $GITHUB_OUTPUT
            echo "release=true" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        if: ${{ steps.create_tag.outputs.release == 'true' }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.create_tag.outputs.tag_version }}
          release_name: "${{ steps.create_tag.outputs.tag_version }}: ${{ steps.git_info.outputs.git_subject }}"
          body: ${{ steps.git_info.outputs.git_body }}

  download-artifact-s3:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    needs: git-tag-release
    env:
      BUCKET_NAME: "pipeline-artifact-mgmt-dev.nodestack.cloud"
    outputs:
      artifact-empty: ${{ steps.validate-artifact.outputs.artifact-empty }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Download Artifact from S3
        run: |
          git fetch --all --tags

          VERSION=$(cat VERSION)

          echo -e "${GREEN}Download from S3: ${YELLOW} ${BUCKET_NAME}${NC}"
          aws s3 cp s3://${BUCKET_NAME}/${VERSION}/ ./bin/ --recursive

      - name: Validate if artifact is empty
        id: validate-artifact
        run: |
          if [ -z "$(ls -A ./bin)" ]
          then
            echo "Empty"
            echo "artifact-empty=true" >>$GITHUB_OUTPUT
          else
            echo "Not Empty"
            echo "artifact-empty=false" >>$GITHUB_OUTPUT
          fi

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: go-code-artifact-s3
          path: bin/
          retention-days: 1

  zip-code:
    if: github.event.pull_request.merged == true && needs.download-artifact-s3.outputs.artifact-empty == 'false'
    runs-on: ubuntu-latest
    needs: download-artifact-s3
    env:
      BUCKET_NAME: "pipeline-artifact-mgmt-dev.nodestack.cloud"
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: go-code-artifact-s3
          path: bin/

      - name: Zip code
        run: |
          VERSION=$(cat VERSION)

          for module in $(ls ./bin)
          do
            echo -e "\nZIP_CODE: ${YELLOW}Zip file ./bin/${module}/main${NC}"
            cd ./bin/${module}
            zip "${VERSION}.zip" main
            cd -

            mkdir -p ./zip/${module}
            mv "./bin/${module}/${VERSION}.zip" ./zip/${module}
            echo -e "ZIP_CODE: ${YELLOW}Versioned output: ./bin/${module}/${VERSION}.zip${NC}"
          done

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: go-zip-artifact
          path: zip/
          retention-days: 1

  aws-push-code-to-s3:
    if: github.event.pull_request.merged
    runs-on: ubuntu-latest
    needs: zip-code
    env:
      BUCKET_NAME: "lambda-source-code-mgmt-dev.nodestack.cloud"
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: go-zip-artifact
          path: zip/

      - name: Push to S3
        run: |
          VERSION=$(cat VERSION)

          for module in $(ls -A ./zip); do
            echo -e "${GREEN}PUSH TO S3: ${YELLOW}Files in module ./zip/${module} will be pushed to lambda ${BUCKET_NAME}${NC}"
            aws s3 cp ./zip/${module} s3://${BUCKET_NAME}/${module} --recursive
          done

      - name: Deploy code to Lambda
        run: |
          if [ -d ./zip ] && [ "$(ls -A ./zip)" ]; then
            for module in $(ls -A ./zip); do
              package=$(ls ./zip/${module}/)

              echo -e "${GREEN}Deploy Lambda ${module}-${PROJECT}-${ENVIRONMENT}${NC}: ${YELLOW}Package: ${package}${NC}"
              aws lambda update-function-code --function-name ${module}-${PROJECT}-${ENVIRONMENT}  --s3-bucket ${BUCKET_NAME} --s3-key ${module}/${package}
            done
          fi
